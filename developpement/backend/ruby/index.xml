<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby on Ma documentation</title><link>http://quentinpigne.github.io/developpement/backend/ruby/</link><description>Recent content in Ruby on Ma documentation</description><generator>Hugo -- gohugo.io</generator><language>fr-FR</language><atom:link href="http://quentinpigne.github.io/developpement/backend/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Bases du langage</title><link>http://quentinpigne.github.io/developpement/backend/ruby/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/ruby/basics/</guid><description>Variables Types Integer 1234 Float 3.14 String 'string' ou &amp;quot;string&amp;quot; Boolean true et false En Ruby, le type null est nil.
Méthodes utiles pour convertir les types to_i : conversion en Integer to_f : conversion en Float to_s : conversion en String Vérifier qu&amp;rsquo;une variable est d&amp;rsquo;un certain type En Ruby, on vérifie rarement le type d&amp;rsquo;une variable, on utilise plutôt la méthode respond_to? afin de vérifier qu&amp;rsquo;on puisse lui appliquer une certaine méthode.</description></item><item><title>Programmation Orientée Objet</title><link>http://quentinpigne.github.io/developpement/backend/ruby/poo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/ruby/poo/</guid><description>Classes Création et instanciation d&amp;rsquo;une classe Un classe se crée à l&amp;rsquo;aide du mot clé class puis s&amp;rsquo;instencie avec la méthode new.
class MaClasse ... end object = MaClasse.new puts object.inspect #&amp;lt;MaClasse:id&amp;gt; Variables d&amp;rsquo;instance et constructeur En Ruby, les variables d&amp;rsquo;instance sont symbolisées par un @ et sont définit directement au niveau du constructeur, lui-même définit avec la méthode initialize.
class MaClasse def initialize(var1, var2) @var1 = var1 @var2 = var2 end end Méthodes d&amp;rsquo;instance Les méthodes d&amp;rsquo;instance se définissent au sein de la classe comme des méthodes classiques et suivent les même conventions.</description></item><item><title>Modules, namespaces et mixins</title><link>http://quentinpigne.github.io/developpement/backend/ruby/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/ruby/modules/</guid><description>Les modules Définition et création Il est possible de créer un module avec le mot-clé module.
Un module fonctionne un peu comme une classe. À la différence qu&amp;rsquo;il ne peut ni être instancié ni hérité. Il peut en revanche contenir des constantes, des variables, des méthodes (toujours avec self) ou des classes.
module MonModule MA_CONSTANTE = 1 def self.une_methode() ... end class MaClasse ... end end Inclusion de modules tiers Tous les modules ne sont pas inclus par defaut, il est possible d&amp;rsquo;inclure des modules tiers avec le mot-clé require.</description></item></channel></rss>