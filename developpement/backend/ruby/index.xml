<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby :: Ma documentation</title><link>http://quentinpigne.github.io/developpement/backend/ruby/index.html</link><description>Bases du langage Programmation Orientée Objet Modules, namespaces et mixins</description><generator>Hugo</generator><language>fr-FR</language><atom:link href="http://quentinpigne.github.io/developpement/backend/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Bases du langage</title><link>http://quentinpigne.github.io/developpement/backend/ruby/basics/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/ruby/basics/index.html</guid><description>Variables Types Integer 1234 Float 3.14 String 'string' ou "string" Boolean true et false En Ruby, le type null est nil.
Méthodes utiles pour convertir les types to_i : conversion en Integer to_f : conversion en Float to_s : conversion en String Vérifier qu’une variable est d’un certain type En Ruby, on vérifie rarement le type d’une variable, on utilise plutôt la méthode respond_to? afin de vérifier qu’on puisse lui appliquer une certaine méthode.</description></item><item><title>Programmation Orientée Objet</title><link>http://quentinpigne.github.io/developpement/backend/ruby/poo/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/ruby/poo/index.html</guid><description>Classes Création et instanciation d’une classe Un classe se crée à l’aide du mot clé class puis s’instencie avec la méthode new.
class MaClasse ... end object = MaClasse.new puts object.inspect #&lt;MaClasse:id>Variables d’instance et constructeur En Ruby, les variables d’instance sont symbolisées par un @ et sont définit directement au niveau du constructeur, lui-même définit avec la méthode initialize.</description></item><item><title>Modules, namespaces et mixins</title><link>http://quentinpigne.github.io/developpement/backend/ruby/modules/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/ruby/modules/index.html</guid><description>Les modules Définition et création Il est possible de créer un module avec le mot-clé module.
Un module fonctionne un peu comme une classe. À la différence qu’il ne peut ni être instancié ni hérité. Il peut en revanche contenir des constantes, des variables, des méthodes (toujours avec self) ou des classes.
module MonModule MA_CONSTANTE = 1 def self.une_methode() ... end class MaClasse ... end end</description></item></channel></rss>