<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Science on Ma documentation</title><link>http://quentinpigne.github.io/developpement/backend/python/data-science/index.html</link><description>Recent content in Data Science on Ma documentation</description><generator>Hugo -- gohugo.io</generator><language>fr-FR</language><atom:link href="http://quentinpigne.github.io/developpement/backend/python/data-science/index.xml" rel="self" type="application/rss+xml"/><item><title>Numpy</title><link>http://quentinpigne.github.io/developpement/backend/python/data-science/numpy/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/python/data-science/numpy/index.html</guid><description>Introduction import numpy as np Tableaux multidimensionnels Introduction aux tableaux multidimensionnels La fonctionnalité de base de NumPy est ndarray, qui représente un tableau multidimensionnel. Pour en déclarer un, il suffit de créer une liste Python et d&amp;rsquo;utiliser le constructeur np.array.
np.array([1, 2, 3, 4, 5, 6, 7, 8]) # Pour créer plusieurs dimensions, il suffit de créer des listes de listes np.array([[1, 2, 3, 4], [5, 6, 7, 8]]) # La manière dont les lignes sont arrangées donne la dimension du tableau np.</description></item><item><title>Matplotlib</title><link>http://quentinpigne.github.io/developpement/backend/python/data-science/matplotlib/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/python/data-science/matplotlib/index.html</guid><description>L&amp;rsquo;objectif de cet article est de vous faire découvrir, au travers d&amp;rsquo;exemples, quelques&amp;rsquo;unes des possibilités du module matplotlib. Avant de commencer, il est important de comprendre que matplotlib offre 2 interfaces distinctes :
pylab est une interface similaire à celle de matlab et existe essentiellement pour des raisons historiques. pyplot est l&amp;rsquo;interface officielle que je vous recommande d&amp;rsquo;utiliser. Tout au long de cet article, on supposera donc que les commandes suivantes ont été exécutées dans chaque session interactive (ou bien se trouvent au début de chaque script)</description></item><item><title>Scipy</title><link>http://quentinpigne.github.io/developpement/backend/python/data-science/scipy/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/python/data-science/scipy/index.html</guid><description>Présentation de SciPy Différences entre NumPy et SciPy NumPy est une bibliothèque qui implémente, entre autres, les fonctionnalités présentées dans l&amp;rsquo;article précédent. Historiquement, elle est la bibliothèque de référence pour ce genre de problématiques. Elle a pour vocation à rester dans ce domaine précis et elle assure une compatibilité ascendante pour permettre à ses utilisateurs une certaine stabilité.
Le coeur du module NumPy est le tableau multidimensionnel et les fonctionnalités basiques qui lui sont liées, telles que l&amp;rsquo;indexation, le tri, ou encore le modelage des données, par exemple.</description></item></channel></rss>