<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture :: Ma documentation</title><link>http://quentinpigne.github.io/architecture/index.html</link><description>C4 Model Domain Driven Design</description><generator>Hugo</generator><language>fr-FR</language><atom:link href="http://quentinpigne.github.io/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>C4 Model</title><link>http://quentinpigne.github.io/architecture/c4/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/architecture/c4/index.html</guid><description>System context diagram Container diagram Component diagram Code diagram Références https://c4model.com/</description></item><item><title>Domain Driven Design</title><link>http://quentinpigne.github.io/architecture/domain-driven-design/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/architecture/domain-driven-design/index.html</guid><description>Introduction / Définition Les logiciels doivent rester pratiques, utiles et ergonomiques. Le Domain Driven Design est une approche de conception qui vise à accorder de l’importance au domaine métier, à travers des design patterns de conception.
Références https://cdiese.fr/domain-driven-design-en-5-min/ https://lesdieuxducode.com/blog/2019/7/introduction-au-domain-driven-design https://khalilstemmler.com/articles/typescript-domain-driven-design/ddd-frontend/</description></item></channel></rss>