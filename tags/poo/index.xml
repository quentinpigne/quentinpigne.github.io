<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>poo on Ma documentation</title><link>http://quentinpigne.github.io/tags/poo/</link><description>Recent content in poo on Ma documentation</description><generator>Hugo -- gohugo.io</generator><language>fr-FR</language><atom:link href="http://quentinpigne.github.io/tags/poo/index.xml" rel="self" type="application/rss+xml"/><item><title>Programmation Orientée Objet</title><link>http://quentinpigne.github.io/developpement/backend/ruby/poo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/ruby/poo/</guid><description>Classes Création et instanciation d&amp;rsquo;une classe Un classe se crée à l&amp;rsquo;aide du mot clé class puis s&amp;rsquo;instencie avec la méthode new.
class MaClasse ... end object = MaClasse.new puts object.inspect #&amp;lt;MaClasse:id&amp;gt; Variables d&amp;rsquo;instance et constructeur En Ruby, les variables d&amp;rsquo;instance sont symbolisées par un @ et sont définit directement au niveau du constructeur, lui-même définit avec la méthode initialize.
class MaClasse def initialize(var1, var2) @var1 = var1 @var2 = var2 end end Méthodes d&amp;rsquo;instance Les méthodes d&amp;rsquo;instance se définissent au sein de la classe comme des méthodes classiques et suivent les même conventions.</description></item></channel></rss>