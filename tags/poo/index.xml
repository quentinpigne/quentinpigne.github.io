<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Poo :: Tag :: Ma documentation</title><link>http://quentinpigne.github.io/tags/poo/index.html</link><description/><generator>Hugo</generator><language>fr-FR</language><atom:link href="http://quentinpigne.github.io/tags/poo/index.xml" rel="self" type="application/rss+xml"/><item><title>Programmation Orientée Objet</title><link>http://quentinpigne.github.io/developpement/backend/ruby/poo/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/backend/ruby/poo/index.html</guid><description>Classes Création et instanciation d’une classe Un classe se crée à l’aide du mot clé class puis s’instencie avec la méthode new.
class MaClasse ... end object = MaClasse.new puts object.inspect #&lt;MaClasse:id> Variables d’instance et constructeur En Ruby, les variables d’instance sont symbolisées par un @ et sont définit directement au niveau du constructeur, lui-même définit avec la méthode initialize.
class MaClasse def initialize(var1, var2) @var1 = var1 @var2 = var2 end end Méthodes d’instance Les méthodes d’instance se définissent au sein de la classe comme des méthodes classiques et suivent les même conventions. (nommage, ? si renvoie booléen, ! si modifie l’objet…)</description></item></channel></rss>