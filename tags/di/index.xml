<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>di on Ma documentation</title><link>http://quentinpigne.github.io/tags/di/index.html</link><description>Recent content in di on Ma documentation</description><generator>Hugo -- gohugo.io</generator><language>fr-FR</language><atom:link href="http://quentinpigne.github.io/tags/di/index.xml" rel="self" type="application/rss+xml"/><item><title>Injection context</title><link>http://quentinpigne.github.io/developpement/frontend/angular/dependency_injection/injection_context/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/frontend/angular/dependency_injection/injection_context/index.html</guid><description>Références https://angular.io/guide/dependency-injection-context</description></item><item><title>Multiple providers</title><link>http://quentinpigne.github.io/developpement/frontend/angular/dependency_injection/multiple_providers/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://quentinpigne.github.io/developpement/frontend/angular/dependency_injection/multiple_providers/index.html</guid><description>Le multi-providing en Angular est la capacité du framework à fournir plusieurs dépendances au sein du même token.
const SOME_TOKEN: InjectionToken = new InjectionToken(&amp;#39;SomeToken&amp;#39;); var injector = Injector.create([ { provide: SOME_TOKEN, useValue: &amp;#39;dependency one&amp;#39;, multi: true }, { provide: SOME_TOKEN, useValue: &amp;#39;dependency two&amp;#39;, multi: true } ]); var dependencies = injector.get(SOME_TOKEN); // dependencies == [&amp;#39;dependency one&amp;#39;, &amp;#39;dependency two&amp;#39;] Références https://blog.thoughtram.io/angular2/2015/11/23/multi-providers-in-angular-2.html#other-multi-providers</description></item></channel></rss>