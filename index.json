[{"content":"The CSS Reset /* 1. Use a more-intuitive box-sizing model. */ *, *::before, *::after { box-sizing: border-box; } /* 2. Remove default margin */ * { margin: 0; } /* 3. Allow percentage-based heights in the application */ html, body { height: 100%; } /* Typographic tweaks! 4. Add accessible line-height 5. Improve text rendering */ body { line-height: 1.5; -webkit-font-smoothing: antialiased; } /* 6. Improve media defaults */ img, picture, video, canvas, svg { display: block; max-width: 100%; } /* 7. Remove built-in form typography styles */ input, button, textarea, select { font: inherit; } /* 8. Avoid text overflows */ p, h1, h2, h3, h4, h5, h6 { overflow-wrap: break-word; } /* 9. Create a root stacking context */ #root, #__next { isolation: isolate; } Références https://meyerweb.com/eric/tools/css/reset/ https://www.joshwcomeau.com/css/custom-css-reset/ ","description":"","tags":["css"],"title":"CSS Reset","uri":"/developpement/frontend/css-scss/css-reset/"},{"content":" Raccourcis clavier ","description":"","tags":null,"title":"Figma","uri":"/design/figma/"},{"content":" CSS - SCSS CSS Reset Angular Mise en place d'un projet Organisation des fichiers Vues et manipulations du DOM Migration de Karma vers Jest ","description":"","tags":null,"title":"Front-end","uri":"/developpement/frontend/"},{"content":"Ce document vise a donner une méthode pour sauvegarder les fichiers de config de sa machine.\nInitialisation du repository Commencer par créer un bare-repository Git .dotfiles afin de pouvoir versionner les fichiers souhaités\ngit init --bare $HOME/.dotfiles Puis créer un alias dotfiles afin de faciliter l’utilisation de ce repository\nalias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME' Configurer git pour qu’il n’affiche pas les fichiers non inclus\ndotfiles config --local status.showUntrackedFiles no Il peut être utile de créer une branche par ordinateur\ndotfiles checkout -b bureau Finir par configurer le dépôt distant et tout pousser dedans\ndotfiles remote add origin git@mondomain.org:monorg/dotfile.git dotfiles push dotfiles push --set-upstream origin bureau Warning Attention, il ne faut pas pousser des données critiques sur des repository publiques, ni même sur des repos privés hébergés sur des sites publiques comme Github, Gitlab ou Bitbucket. Par exemple des clef privée ssh, ou des tokens d’api…\nUtilisation Pour l’utilisation courante avec des exemples utiles :\ndotfiles status dotfiles add .vimrc dotfiles commit -m \"Add vimrc\" dotfiles add .bashrc dotfiles commit -m \"Add bashrc\" dotfiles add .bash_aliases dotfiles commit -m \"Add .bash_aliases\" dotfiles add .zshrc dotfiles commit -m \"Add .zshrc\" dotfiles add .ssh/config dotfiles commit -m \"Add .ssh config\" dotfiles add .screenrc dotfiles commit -m \"Add .screenrc\" dotfiles add .kube/config dotfiles commit -m \"Add kubectl config\" dotfiles add .gitconfig .git-credentials dotfiles commit -m \"Add git config\" dotfiles add .aws/config .aws/credentials .aws/shell/awsshellrc .aws/shell/history dotfiles commit -m \"Add aws config\" Restauration des dotfiles sur un ordinateur Il faut commencer par créer l’alias comme dans la section d’initalisation\nalias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME' Puis récuperer le repository\ngit clone --bare git@mondomain.org:monorg/dotfile.git $HOME/.dotfiles Et enfin passer sur la bonne branche\ndotfiles checkout bureau Note Afin d’éviter les problèmes de perte de données avec les fichiers en conflits ou installés de base, on va les copier dans un répertoire pour les sauvegarder.\nmkdir -p .dotfile-backup \u0026\u0026 \\ dotfiles checkout bureau 2\u003e\u00261 | egrep \"\\s+\\.\" | awk {'print $1'} | \\ xargs -I{} mv {} .dotfile-backup/{} et comme on a déplacé les fichiers en conflit, on peut re-lancer le checkout\ndotfiles checkout bureau Branches différentes Si on ne veut pas melanger ses fichiers de configurations mais qu’on souhaite tout versionner dans son repo\nIl faut creer une autre branche vide home\ndotfiles checkout --orphan home dotfiles add .bash_aliases dotfiles commit .bash_aliases dotfiles push --set-upstream origin home Ajouter ensuite tous les fichiers comme décrit au début.\nRéférences doc doc doc ","description":"","tags":["workspace","dotfiles"],"title":"Gestion des fichiers de config","uri":"/workspace/dotfiles/"},{"content":"Création du projet Un projet Angular peut se présenter sous deux structures différentes. Une structure “classique” qui ne comprend qu’un unique projet ou bien un workspace pouvant contenir plusieurs applications ou librairies (aussi appelé “monorepo”)\nStructure ‘classique’ ng new [application-name] --routing --style scss --prefix [prefix] Workspace vide + application (monorepo) ng new [project-name] --create-application false ng generate application [application-name] --routing --style scss --prefix [prefix] Info Si le projet est créé dans un dépôt Git existant, il faut utiliser l’option --skip-git afin de spécifier au CLI d’Angular de ne pas initialiser de dépôt Git.\nIl peut aussi être utile de spécifier le package manager à utiliser à l’aide de l’option --package-manager.\nDans des cas plus rares, l’option --new-project-root permet de spécifier le nom du dossier dans lequel les nouvelles applications devront être générées.\nAjout d’ESLint et de Prettier Installation d’ESLint Il est possible d’ajouter facilement ESLint à un projet Angular en executant le schematic fourni :\nng add @angular-eslint/schematics Cela aura pour effet d’installer les dépendances nécessaires et créer le(s) fichier(s) de configuration associé(s).\nInstallation de Prettier Commencer par installer la package prettier ainsi que les deux plugins nécessaires à son intégration avec ESLint npm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier Créer un fichier .prettierrc.json à la racine du projet { \"printWidth\": 120, \"singleQuote\": true, \"trailingComma\": \"all\", \"bracketSpacing\": true, \"overrides\": [ { \"files\": \".editorconfig\", \"options\": { \"parser\": \"yaml\" } } ] } Exemple de configuration ESLint pour workspace multi-projets racine projet { \"root\": true, \"ignorePatterns\": [\"projects/**/*\"], \"overrides\": [ { \"files\": [\"*.ts\"], \"extends\": [ \"plugin:@typescript-eslint/recommended\", \"plugin:@typescript-eslint/recommended-requiring-type-checking\", \"plugin:@angular-eslint/recommended\", \"plugin:@angular-eslint/template/process-inline-templates\", \"plugin:prettier/recommended\" ], \"rules\": {} }, { \"files\": [\"*.html\"], \"extends\": [\"plugin:@angular-eslint/template/recommended\"], \"rules\": {} } ] } { \"extends\": \"../../.eslintrc.json\", \"ignorePatterns\": [\"!**/*\"], \"overrides\": [ { \"files\": [\"*.ts\"], \"parserOptions\": { \"project\": [ \"./tsconfig.lib.json\", \"./tsconfig.spec.json\" ] }, \"rules\": { \"@typescript-eslint/no-inferrable-types\": \"off\", \"@typescript-eslint/no-empty-function\": \"off\", \"@angular-eslint/no-output-native\": \"off\", \"@angular-eslint/directive-selector\": [ \"error\", { \"type\": \"attribute\", \"prefix\": \"ui\", \"style\": \"camelCase\" } ], \"@angular-eslint/component-selector\": [ \"error\", { \"type\": [\"element\", \"attribute\"], \"prefix\": \"ui\", \"style\": \"kebab-case\" } ] } } ] } Ajout de Stylelint Commencer par installer la package stylelint ainsi que sa configuration standard npm install --save-dev stylelint stylelint-config-standard Créer un fichier .stylelintrc.json à la racine du projet { \"extends\": \"stylelint-config-standard\" } Ajout de Commitlint Commencer par installer la package commitlint ainsi que sa configuration standard npm install -g @commitlint/cli @commitlint/config-conventional Créer un fichier commitlint.config.js à la racine du projet module.exports = { extends: ['@commitlint/config-conventional'] } Ajout de Husky Husky est un outil qui permet de gérer facilement les Hooks Git en exécutant des scripts au format Node.js\nInstallation Il peut s’installer de manière automatique grâce au script d’initialisation\nnpx husky-init \u0026\u0026 npm install Mais aussi de manière manuelle en exécutant une suite de commandes :\nnpm install husky --save-dev npx husky install npm set-script prepare \"husky install\" Création de hooks Il est nécessaire des hooks afin d’exécuter les linters, les tests au commit et/ou au push. Pour ajouter une commande à un hook ou en créer un nouveau, utiliser la commande husky add \u003cfile\u003e [cmd]\nAjout de Storybook Storybook est un outil qui peut s’avérer très utile pour visualiser et tester ses composants en isolation. Il s’installe très facilement en exécutant le script d’init :\nnpx storybook init ","description":"","tags":["angular"],"title":"Mise en place d'un projet","uri":"/developpement/frontend/angular/project-setup/"},{"content":"Cette rubrique présente les différents articles liés à l’environnement de travail.\nGestion des fichiers de config Linux Windows ","description":"","tags":null,"title":"Poste de travail","uri":"/workspace/"},{"content":"Zoom Shift + 0 : Zoom 100% Shift + 1 : Fit layer to screen Shift + 2 : Zoom in the selected frame Hide/Show Shift + R : Hide/Show Rulers Control + G : Hide/Show Layout Grids Tools P : Pen V : Move T : Text tool H : Hand I : Color picker Go to Option + 1 : Go to layers menu Option + 2 : Go to components menu For Windows, use Alt instead of Option\nCopy/Paste styles Option + Command + C : Copy style Option + Command + V : Paste style For Windows, use Ctrl + Shift instead of Option + Command\nGroup/Ungroup Command + C : Group selection Command + Shift + V : Ungroup selection For Windows, use Ctrl instead of Command\n","description":"","tags":["figma"],"title":"Raccourcis clavier","uri":"/design/figma/shortcuts/"},{"content":" CSS Reset ","description":"","tags":null,"title":"CSS - SCSS","uri":"/developpement/frontend/css-scss/"},{"content":" Front-end CSS - SCSS CSS Reset Angular Mise en place d'un projet Organisation des fichiers Vues et manipulations du DOM Migration de Karma vers Jest ","description":"","tags":null,"title":"Développement","uri":"/developpement/"},{"content":"","description":"","tags":null,"title":"Linux","uri":"/workspace/linux/"},{"content":"src +-- app | +-- modules | | +-- home | | | +-- components | | | | +-- ... | | | +-- pages | | | | +-- ... | | | +-- home-store | | | | home.actions.ts | | | | home.reducers.ts | | | | home.effects.ts | | | | home.selectors.ts | | | | home.state.ts | | | | home-store.module.ts | | | home.routing.module.ts | | | home.module.ts | +-- core | | +-- core-store | | | +-- actions | | | | user.actions.ts | | | | index.ts | | | +-- reducers | | | | user.reducer.ts | | | | index.ts | | | +-- effects | | | | user.effects.ts | | | +-- selectors | | | | user.selectors.ts | | | core-store.module.ts | | +-- shell | | | +-- components | | | | +-- header | | | | | header.component.[ts|spec.ts|html|scss] | | | | +-- footer | | | | | footer.component.[ts|spec.ts|html|scss] | | | shell.module.ts | | | shell.component.[ts|spec.ts|html|scss] | | +-- authentication | | +-- services | | +-- ... | | core.module.ts | +-- shared | | +-- componentes | | +-- directives | | +-- pipes | | shared.module.ts | app.module.ts | app-routing.module.ts | app.component.ts | app.component.spec.ts | app.component.scss | app.component.html +-- assets +-- environments | environment.prod.ts | environment.ts index.html main.ts polyfills.ts styles.scss test.ts Modules Les modules sont un groupements de pages similaires fonctionnellement. Ils servent au découpage de l’application en vue du Lazy-loading\nPages Les pages sont un groupements de composants dont l’organisation est calqué sur la navigation. A chaque page correspond une route au niveau du RoutingModule\nComposants Un composant est une unité atomique représentant un élément d’une page\n","description":"","tags":["angular"],"title":"Organisation des fichiers","uri":"/developpement/frontend/angular/files-organization/"},{"content":" Figma Raccourcis clavier ","description":"","tags":null,"title":"Design","uri":"/design/"},{"content":"Vues en Angular En Angular, une vue (View) est la pierre angulaire constitutrice de toute application front. C’est le plus petit groupe d’éléments qui sont créés et détruits ensemble. La philosophie d’Angular encourage les dévelopeurs à voir l’application comme une composition de view, et non un assemblage d’éléments HTML.\nViewRef ViewRef est une classe abstraite représentant une vue Angular. Angular supporte 2 types de vues :\nles EmbeddedView qui sont liées à un Template les HostView qui sont liées à un Component Références https://indepth.dev/posts/1052/exploring-angular-dom-manipulation-techniques-using-viewcontainerref https://indepth.dev/posts/1134/working-with-dom-in-angular-unexpected-consequences-and-optimization-techniques ","description":"","tags":["angular","dom"],"title":"Vues et manipulations du DOM","uri":"/developpement/frontend/angular/dom_manipulation/"},{"content":"","description":"","tags":null,"title":"Windows","uri":"/workspace/windows/"},{"content":"Angular est fourni par défaut avec Karma. Il est cependant très simple de passer de Karma à Jest.\nSupprimer Karma Commencer par supprimer les fichiers src/karma.conf.js et src/test.ts.\nPuis dans le fichier package.json, supprimer les dépendances suivantes dans devDependencies:\n\"karma\": \"*\", \"karma-chrome-launcher\": \"*\", \"karma-coverage-istanbul-reporter\": \"*\", \"karma-jasmine\": \"*\", \"karma-jasmine-html-reporter\": \"*\", Installer Jest Installer Jest dans le projet à l’aide de la commande suivante :\nnpm i -D jest @types/jest ts-jest @angular-builders/jest Ajouter un fichier nommé jest.config.js dans le même dossier que package.json\n/** jest.config.js */ module.exports = { collectCoverageFrom: [ '\u003crootDir\u003e/src/app/**/*.ts', '!\u003crootDir\u003e/src/app/**/index.ts', '!\u003crootDir\u003e/src/app/**/*.module.ts' ], coverageDirectory: 'coverage', coverageReporters: [ 'lcov', 'text-summary' ], testPathIgnorePatterns: [ '\u003crootDir\u003e/coverage/', '\u003crootDir\u003e/dist/', '\u003crootDir\u003e/e2e/', '\u003crootDir\u003e/node_modules/', '\u003crootDir\u003e/src/app/*.(js|scss)' ], testMatch: [ '\u003crootDir\u003e/src/app/*.spec.ts', '\u003crootDir\u003e/src/app/**/*.spec.ts' ] }; Puis dans le fichier src/tsconfig.spec.json:\nRemplcez “jasmine” et “node” par “jest” dans la liste types Ajouter \"module\": \"commonjs\" aux compilerOptions Supprimer “test.js” de la liste files Le fichier src/tsconfig.spec.json doit maintenant ressembler à ça:\n{ \"extends\": \"./tsconfig.json\", \"compilerOptions\": { \"module\": \"commonjs\", \"outDir\": \"./out-tsc/spec\", \"types\": [ \"jest\" ], }, \"files\": [ \"polyfills.ts\" ], \"include\": [ \"**/*.spec.ts\", \"**/*.d.ts\" ] } Dans src/tsconfig.app.json supprimer “test.ts” de la liste exclude.\nEt pour finir, modifier le fichier angular.json. Changer la section projects[your-project].architect.test de manière à ce quelle ressemble à cela:\n\"test\": { \"builder\": \"@angular-builders/jest:run\", \"options\": {} }, À la suite des ces changements, il peut être nécessaire de supprimer le dossier node_modules et de lancer un npm install à nouveau.\nIl devrait maintenant être possible de lancer les tests avec la commande npm test.\nIl est aussi possible d’ajouter un script au package.json pour lancer la suite de tests directement avec la couverture de code.\n... \"scripts\": { ... \"test:cov\": \"ng test --coverage\" }, ... Et lancer le avec la commande npm run test:cov.\nLe rapport de couverture de code doit être présent dans le dossier coverage à la racine du projet.\nRéférences https://medium.com/angular-in-depth/migrate-your-angular-library-to-jest-faba9579591a https://dev.to/this-is-angular/migrate-from-jasmine-to-jest-and-testing-in-angular-286i ","description":"","tags":["tests unitaires","jest","angular"],"title":"Migration de Karma vers Jest","uri":"/developpement/frontend/angular/karma2jest/"},{"content":"","description":"","tags":null,"title":"angular","uri":"/tags/angular/"},{"content":" Mise en place d'un projet Organisation des fichiers Vues et manipulations du DOM Migration de Karma vers Jest ","description":"","tags":null,"title":"Angular","uri":"/developpement/frontend/angular/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/categories/"},{"content":"","description":"","tags":null,"title":"css","uri":"/tags/css/"},{"content":"","description":"","tags":null,"title":"dom","uri":"/tags/dom/"},{"content":"","description":"","tags":null,"title":"dotfiles","uri":"/tags/dotfiles/"},{"content":"","description":"","tags":null,"title":"figma","uri":"/tags/figma/"},{"content":"","description":"","tags":null,"title":"jest","uri":"/tags/jest/"},{"content":"","description":"","tags":null,"title":"Ma documentation","uri":"/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/tags/"},{"content":"","description":"","tags":null,"title":"tests unitaires","uri":"/tags/tests-unitaires/"},{"content":"","description":"","tags":null,"title":"workspace","uri":"/tags/workspace/"}]