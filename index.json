[{"content":"The CSS Reset /* 1. Use a more-intuitive box-sizing model. */ *, *::before, *::after {  box-sizing: border-box; }  /* 2. Remove default margin */ * {  margin: 0; }  /* 3. Allow percentage-based heights in the application */ html, body {  height: 100%; }  /* Typographic tweaks! 4. Add accessible line-height 5. Improve text rendering */ body {  line-height: 1.5;  -webkit-font-smoothing: antialiased; }  /* 6. Improve media defaults */ img, picture, video, canvas, svg {  display: block;  max-width: 100%; }  /* 7. Remove built-in form typography styles */ input, button, textarea, select {  font: inherit; }  /* 8. Avoid text overflows */ p, h1, h2, h3, h4, h5, h6 {  overflow-wrap: break-word; }  /* 9. Create a root stacking context */ #root, #__next {  isolation: isolate; } Références  https://meyerweb.com/eric/tools/css/reset/ https://www.joshwcomeau.com/css/custom-css-reset/  ","description":"","tags":["css"],"title":"CSS Reset","uri":"/developpement/frontend/css-scss/css-reset/"},{"content":" CSS - SCSS CSS Reset Angular Organisation des fichiers Vues et manipulations du DOM Migration de Karma vers Jest  ","description":"","tags":null,"title":"Front-end","uri":"/developpement/frontend/"},{"content":"Ce document vise a donner une méthode pour sauvegarder les fichiers de config de sa machine.\nInitialisation du repository Commencer par créer un bare-repository Git .dotfiles afin de pouvoir versionner les fichiers souhaités\ngit init --bare $HOME/.dotfiles Puis créer un alias dotfiles afin de faciliter l’utilisation de ce repository\nalias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME' Configurer git pour qu’il n’affiche pas les fichiers non inclus\ndotfiles config --local status.showUntrackedFiles no Il peut être utile de créer une branche par ordinateur\ndotfiles checkout -b bureau Finir par configurer le dépôt distant et tout pousser dedans\ndotfiles remote add origin git@mondomain.org:monorg/dotfile.git dotfiles push dotfiles push --set-upstream origin bureau   Warning Attention, il ne faut pas pousser des données critiques sur des repository publiques, ni même sur des repos privés hébergés sur des sites publiques comme Github, Gitlab ou Bitbucket. Par exemple des clef privée ssh, ou des tokens d’api…\n  Utilisation Pour l’utilisation courante avec des exemples utiles :\ndotfiles status  dotfiles add .vimrc dotfiles commit -m \"Add vimrc\"  dotfiles add .bashrc dotfiles commit -m \"Add bashrc\"  dotfiles add .bash_aliases dotfiles commit -m \"Add .bash_aliases\"  dotfiles add .zshrc dotfiles commit -m \"Add .zshrc\"  dotfiles add .ssh/config dotfiles commit -m \"Add .ssh config\"  dotfiles add .screenrc dotfiles commit -m \"Add .screenrc\"  dotfiles add .kube/config dotfiles commit -m \"Add kubectl config\"  dotfiles add .gitconfig .git-credentials dotfiles commit -m \"Add git config\"  dotfiles add .aws/config .aws/credentials .aws/shell/awsshellrc .aws/shell/history dotfiles commit -m \"Add aws config\" Restauration des dotfiles sur un ordinateur Il faut commencer par créer l’alias comme dans la section d’initalisation\nalias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME' Puis récuperer le repository\ngit clone --bare git@mondomain.org:monorg/dotfile.git $HOME/.dotfiles Et enfin passer sur la bonne branche\ndotfiles checkout bureau   Note Afin d’éviter les problèmes de perte de données avec les fichiers en conflits ou installés de base, on va les copier dans un répertoire pour les sauvegarder.\nmkdir -p .dotfile-backup \u0026\u0026 \\ dotfiles checkout bureau 2\u003e\u00261 | egrep \"\\s+\\.\" | awk {'print $1'} | \\ xargs -I{} mv {} .dotfile-backup/{}    et comme on a déplacé les fichiers en conflit, on peut re-lancer le checkout\ndotfiles checkout bureau Branches différentes Si on ne veut pas melanger ses fichiers de configurations mais qu’on souhaite tout versionner dans son repo\nIl faut creer une autre branche vide home\ndotfiles checkout --orphan home dotfiles add .bash_aliases dotfiles commit .bash_aliases dotfiles push --set-upstream origin home Ajouter ensuite tous les fichiers comme décrit au début.\nRéférences  doc doc doc  ","description":"","tags":["workspace","dotfiles"],"title":"Gestion des fichiers de config","uri":"/workspace/dotfiles/"},{"content":"","description":"","tags":["angular"],"title":"Organisation des fichiers","uri":"/developpement/frontend/angular/files-organization/"},{"content":"Cette rubrique présente les différents articles liés à l’environnement de travail.\nGestion des fichiers de config Linux Windows  ","description":"","tags":null,"title":"Poste de travail","uri":"/workspace/"},{"content":" CSS Reset  ","description":"","tags":null,"title":"CSS - SCSS","uri":"/developpement/frontend/css-scss/"},{"content":" Front-end CSS - SCSS CSS Reset Angular Organisation des fichiers Vues et manipulations du DOM Migration de Karma vers Jest  ","description":"","tags":null,"title":"Développement","uri":"/developpement/"},{"content":"","description":"","tags":null,"title":"Linux","uri":"/workspace/linux/"},{"content":"Vues en Angular En Angular, une vue (View) est la pierre angulaire constitutrice de toute application front. C’est le plus petit groupe d’éléments qui sont créés et détruits ensemble. La philosophie d’Angular encourage les dévelopeurs à voir l’application comme une composition de view, et non un assemblage d’éléments HTML.\nViewRef ViewRef est une classe abstraite représentant une vue Angular. Angular supporte 2 types de vues :\n les EmbeddedView qui sont liées à un Template les HostView qui sont liées à un Component  Références  https://indepth.dev/posts/1052/exploring-angular-dom-manipulation-techniques-using-viewcontainerref https://indepth.dev/posts/1134/working-with-dom-in-angular-unexpected-consequences-and-optimization-techniques  ","description":"","tags":["angular","dom"],"title":"Vues et manipulations du DOM","uri":"/developpement/frontend/angular/dom_manipulation/"},{"content":"Angular est fourni par défaut avec Karma. Il est cependant très simple de passer de Karma à Jest.\nSupprimer Karma Commencer par supprimer les fichiers src/karma.conf.js et src/test.ts.\nPuis dans le fichier package.json, supprimer les dépendances suivantes dans devDependencies:\n\"karma\": \"*\", \"karma-chrome-launcher\": \"*\", \"karma-coverage-istanbul-reporter\": \"*\", \"karma-jasmine\": \"*\", \"karma-jasmine-html-reporter\": \"*\", Installer Jest Installer Jest dans le projet à l’aide de la commande suivante :\nnpm i -D jest @types/jest ts-jest @angular-builders/jest Ajouter un fichier nommé jest.config.js dans le même dossier que package.json\n/** jest.config.js */ module.exports = { collectCoverageFrom: [ '\u003crootDir\u003e/src/app/**/*.ts', '!\u003crootDir\u003e/src/app/**/index.ts', '!\u003crootDir\u003e/src/app/**/*.module.ts' ], coverageDirectory: 'coverage', coverageReporters: [ 'lcov', 'text-summary' ], testPathIgnorePatterns: [ '\u003crootDir\u003e/coverage/', '\u003crootDir\u003e/dist/', '\u003crootDir\u003e/e2e/', '\u003crootDir\u003e/node_modules/', '\u003crootDir\u003e/src/app/*.(js|scss)' ], testMatch: [ '\u003crootDir\u003e/src/app/*.spec.ts', '\u003crootDir\u003e/src/app/**/*.spec.ts' ] }; Puis dans le fichier src/tsconfig.spec.json:\n Remplcez “jasmine” et “node” par “jest” dans la liste types Ajouter \"module\": \"commonjs\" aux compilerOptions Supprimer “test.js” de la liste files  Le fichier src/tsconfig.spec.json doit maintenant ressembler à ça:\n{ \"extends\": \"./tsconfig.json\", \"compilerOptions\": { \"module\": \"commonjs\", \"outDir\": \"./out-tsc/spec\", \"types\": [ \"jest\" ], }, \"files\": [ \"polyfills.ts\" ], \"include\": [ \"**/*.spec.ts\", \"**/*.d.ts\" ] } Dans src/tsconfig.app.json supprimer “test.ts” de la liste exclude.\nEt pour finir, modifier le fichier angular.json. Changer la section projects[your-project].architect.test de manière à ce quelle ressemble à cela:\n\"test\": { \"builder\": \"@angular-builders/jest:run\", \"options\": {} }, À la suite des ces changements, il peut être nécessaire de supprimer le dossier node_modules et de lancer un npm install à nouveau.\nIl devrait maintenant être possible de lancer les tests avec la commande npm test.\nIl est aussi possible d’ajouter un script au package.json pour lancer la suite de tests directement avec la couverture de code.\n... \"scripts\": { ... \"test:cov\": \"ng test --coverage\" }, ... Et lancer le avec la commande npm run test:cov.\nLe rapport de couverture de code doit être présent dans le dossier coverage à la racine du projet.\n","description":"","tags":["tests unitaires","jest","angular"],"title":"Migration de Karma vers Jest","uri":"/developpement/frontend/angular/karma2jest/"},{"content":"","description":"","tags":null,"title":"Windows","uri":"/workspace/windows/"},{"content":"","description":"","tags":null,"title":"angular","uri":"/tags/angular/"},{"content":" Organisation des fichiers Vues et manipulations du DOM Migration de Karma vers Jest  ","description":"","tags":null,"title":"Angular","uri":"/developpement/frontend/angular/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/categories/"},{"content":"","description":"","tags":null,"title":"css","uri":"/tags/css/"},{"content":"","description":"","tags":null,"title":"dom","uri":"/tags/dom/"},{"content":"","description":"","tags":null,"title":"dotfiles","uri":"/tags/dotfiles/"},{"content":"","description":"","tags":null,"title":"jest","uri":"/tags/jest/"},{"content":"","description":"","tags":null,"title":"Ma documentation","uri":"/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/tags/"},{"content":"","description":"","tags":null,"title":"tests unitaires","uri":"/tags/tests-unitaires/"},{"content":"","description":"","tags":null,"title":"workspace","uri":"/tags/workspace/"}]